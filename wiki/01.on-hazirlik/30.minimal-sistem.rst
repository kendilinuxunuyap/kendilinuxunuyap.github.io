Minimal Dağıtım Oluşturma
++++++++++++++++++++++++++

Dağıtım oluşturmak için kernel ve busybox dosyalarımızın olması yeterlidir. **busybox** dosyasının nasıl elde edileceği busybox bölümünde anlatılmıştır. **kernel** ise mevcut sistemimin kernelini kullanacağız. kernel **/boot/vmlinux** konumundan alabiliriz.

Bu sistemi hazırlarken **chroot** ve **busybox** komutlarını  kullanarak sistemi hazırlayacağız ve test edeceğiz. **chroot** ve **busybox** kullanımı için dokümandanki ilgili konu başlığına bakınız.

Sistemimiz için aşağıdaki gibi bir yapı oluşturmalıyız. 

.. code-block:: shell

	$HOME/distro/rootfs/busybox
	$HOME/distro/rootfs/init
	$HOME/distro/iso/boot/initrd.img
	$HOME/distro/iso/boot/vmlinuz
	$HOME/distro/iso/boot/grub/grub.cfg
	$HOME/distro/distro.iso

Şimdi sırasıyla dosya konumlarına uygun şekilde dizin ve dosyalarımızı oluşturalım.

**Dizinlerin Oluşturulması**
----------------------------

Sitemimizi istediğimiz bir yerinde terminal açarak aşağıdaki komutları sırasıyla çalıştıralım. 

.. code-block:: shell

	mkdir $HOME/distro
	mkdir $HOME/distro/rootfs
	mkdir $HOME/distro/iso
	mkdir $HOME/distro/iso/boot
	mkdir $HOME/distro/iso/boot/grub

**$HOME/distro/rootfs/busybox**
-------------------------------

busybox aşağıdaki komutlarla  **$HOME/distro/rootfs/busybox** konumuna kopyalanak sistemimiz için hazır hale getirilir.

.. code-block:: shell

	cd $HOME/distro/rootfs
	cp /bin/busybox $HOME/distro/rootfs/busybox	
	ldd ./busybox	 
	özdevimli bir çalıştırılabilir değil

"özdevimli bir çalıştırılabilir değil" dinamik değil diyor yani static kısacası bir bağımlılığı yok demektir.
Eğer bağımlılığı olsaydı bağımlı olduğu dosyalarıda konumlarına göre kopyalamamız gerekmekteydi.

**$HOME/distro/rootfs/init**
----------------------------

.. code-block:: shell

	cd $HOME/distro/rootfs
	**touch init** #dosyasını oluştur ve içeriğine aşağıdaki kodları ekle kaydet.

**init içeriği**

.. code-block:: shell

	#!busybox ash
	PATH=/bin
	/busybox mkdir /bin
	/busybox --install -s /bin
	/busybox ash
	


**chomod +x init** komutu ile çalıştırılır yapılır.

**$HOME/distro/iso/boot/initrd.img**
------------------------------------

initrd.img dosyası için aşağıdaki komutlar çalıştırılır

.. code-block:: shell

	cd $HOME/distro/rootfs
	find ./ | cpio -H newc -o >$HOME/distro/iso/boot/initrd.img	

Oluşturulan **initrd.img** dosyası çalışacak tty açacak(konsol elde etmiş olacağız). 
Aslında bu işlemi yapan şey **busybox** ikili dosyası.

**$HOME/distro/iso/boot/vmlinuz**
---------------------------------

.. code-block:: shell

	cp /boot/vmlinuz* $HOME/distro/iso/boot/vmlinuz  #sistemde kullandığım kerneli kopyaladım istenirde kernel derlenebilir.


**$HOME/distro/iso/boot/grub/grub.cfg**
---------------------------------------

.. code-block:: shell
	
	touch $HOME/distro/iso/boot/grub/grub.cfg  #dosyası oluşturulur ve içeriği aşağıdaki gibi düzenlenir ve kaydedilir.

**grub.cfg içeriği**

.. code-block:: shell
	
	linux /boot/vmlinuz
	initrd /boot/initrd.img
	boot

Yukarıdaki üç satır **$HOME/distro/iso/boot/grub/grub.cfg** dosyasının içeri olacak şekilde ayarlanır.

**$HOME/distro/distro.iso**
---------------------------

**grub-mkrescue $HOME/distro/iso/ -o $HOME/distro/distro.iso** komutuyla iso doyamız oluşturulur.

Artık sistemi açabilen ve tty açıp bize suna bir yapı oluşturduk.


**Dağıtımın Test Edilmesi**
---------------------------
 
Hazırlanan   $HOME/distro/distro.iso dağıtımımız qemu veya virtualbox ile test edilebilir.

**qemu-system-x86_64 -cdrom $HOME/distro/distro.iso -m 1G** komutuyla çalıştırıp test edebiliriz.. 
Eğer hatasız yapılmışsa sistem açılacak ve tty açacaktır. Birçok komutu çalışan bir dağıtım oluşturmuş olduk.

