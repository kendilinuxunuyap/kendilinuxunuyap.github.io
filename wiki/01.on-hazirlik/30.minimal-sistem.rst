Minimal Dağıtım Oluşturma
++++++++++++++++++++++++++

Bu minimal dağıtımı oluşturmamızın amacı bu dokümanda anlatılacak dağıtım hazırlama aşamalarını anlaşılması içindir.
Dağıtım oluşturmak için kernel ve busybox dosyalarımızın olması yeterlidir. **busybox** dosyasının nasıl elde edileceği busybox bölümünde anlatılmıştır. **kernel** ise mevcut sistemimin kernelini kullanacağız. kernel **/boot/vmlinux** konumundan alabiliriz.

Bu sistemi hazırlarken **chroot** ve **busybox** komutlarını  kullanarak sistemi hazırlayacağız ve test edeceğiz. **chroot** ve **busybox** kullanımı için dokümandanki ilgili konu başlığına bakınız.

Sistemimiz için aşağıdaki gibi bir yapı oluşturmalıyız. 

1. $HOME/distro/rootfs/busybox
2. $HOME/distro/rootfs/init
3. $HOME/distro/iso/boot/initrd.img
4. $HOME/distro/iso/boot/vmlinuz
5. $HOME/distro/iso/boot/grub/grub.cfg
6. $HOME/distro/distro.iso

Linux sisteminin açılabilmesi için aşağıdaki 3 dosya yeterli. 

. $HOME/distro/iso/boot/initrd.img
. $HOME/distro/iso/boot/vmlinuz
. $HOME/distro/iso/boot/grub/grub.cfg
	
Bu dosyaları yukarıdaki gibi dizin konumlarına koyduktan sonra, 
**grub-mkrescue $HOME/distro/iso/ -o $HOME/distro/distro.iso #iso doyamız oluşturulur.**  komutuyla **distro.iso** dosyası elde ederiz. Artık iso dosyamız boot edebilen hazırlanmış bir dosyadır. Burada bazı sorulara cevap vermemiz gerekmektedir. 

**$HOME/distro/iso/boot/initrd.img** dosyasını sistemin açılış sürecinden ön işlemleri yapmak ve gerçek sisteme geçiş sürecini yöneten bir dosyadır. Yazın devamında nasıl hazırlanacağı anlatılacaktır. 

**$HOME/distro/iso/boot/vmlinuz** dosyamız kernelimiz oluyor. Ben kullandığım debian sisteminin mevcut kernelini kullandım. İstenirse kernel derlenebilir. 

**$HOME/distro/iso/boot/grub/grub.cfg** dosyamız ise initrd.img ve vmlinuz dosyalarının grub yazılımının nereden bulacağını gösteren yapılandırma dosyasıdır.

Bir linux siisteminin açılış süreci şu şekilde olmaktadır.
 
1- **Bilgisayara Güç Verilmesi**

2- **Bios İşlemleri Yapılıyor(POST)**

3- **LILO/GRUB Yazılımı Yükleniyor(grub.cfg dosyası okunuyor ve vmlinuz ve initrd.img devreye giriyor)**

4- **vmlinuz initrd.img sistemini belleğe yüklüyor**

5- **vmlinuz initrd.img sistemini belleğe yüklüyor**

6- **initrd.img içindeki init dosyasındaki işlem sürecine göre sistem işlemlere devam ediyor**

Yazının devamında sistem için gerekli olan 3 temel dosyanın hazırlanması ve iso yapılma süreci anlatılacaktır.

Şimdi sırasıyla dosya konumlarına uygun şekilde dizin ve dosyalarımızı oluşturalım.

**Dizinlerin Oluşturulması**
----------------------------

Sitemimizi istediğimiz bir yerde terminal açarak aşağıdaki komutları sırasıyla çalıştıralım.
Komutları kopyala yapıştır yapabilirsiniz.

.. code-block:: shell

	mkdir $HOME/distro
	mkdir $HOME/distro/rootfs
	mkdir $HOME/distro/iso
	mkdir $HOME/distro/iso/boot
	mkdir $HOME/distro/iso/boot/grub

**$HOME/distro/rootfs/busybox**
-------------------------------

busybox aşağıdaki komutlarla  **$HOME/distro/rootfs/busybox** konumuna kopyalanak sistemimiz için hazır hale getirilir.
Bu sistemi debian ortamında hazırlamaktayız. İsterseniz static busybox derleyebilirsiniz. busybox konusu altında anlatılmaktadır.
isterseniz derlemeden mevcut sistemin altında bulunan static busybox kullanabiliriz. 
Eğer yoksa **sudo apt install busybox-static -y** komutuyla debian sistemimize static busybox yükleyebiliriz. Ben debian üzerine yüklediğim busybox'ı kullanacağım. Eğer sistemde yoksa **sudo apt install busybox-static -y** komutuyla yükleyiniz.

.. code-block:: shell
	
	cd $HOME/distro/rootfs
	cp /bin/busybox $HOME/distro/rootfs/busybox	
	ldd ./busybox	 
	özdevimli bir çalıştırılabilir değil

"özdevimli bir çalıştırılabilir değil" dinamik değil diyor yani static kısacası bir bağımlılığı yok demektir.
Eğer bağımlılığı olsaydı bağımlı olduğu dosyalarıda konumlarına göre kopyalamamız gerekmekteydi.

**$HOME/distro/rootfs/init**
----------------------------

Sistem açılırken iki dosyayı arar kernel ve initrd.img dosyası. Bu dosyaları grub.cfg dosyası içinde verilen konumlarına göre arar. Bu dosyaları bulduktan sonra initrd.img dosyasını açar ve içinde init dosyasını arar. init dosyasındaki komutları sırasıyla çalıştırır. 

**$HOME/distro/rootfs/** konumuna **init** text dosyası oluşturulur(nano, gedit vb.).
Aşağıdaki içerik oluşturulan **init** dosyası içine eklenir.

.. code-block:: shell

	#!busybox ash
	PATH=/bin
	/busybox mkdir /bin
	/busybox --install -s /bin
	/busybox ash

**busybox** içerisinde linux ortamında kullanılan hemen hemen tüm komutların yerine kullanalılabilir. bulunduğumuz ortamda **busybox** dışında hiçbir komutun olmadığını düşünün. Mesela **cp** komutuna ihtiyacınız var bu durumda **busybox cp** yazarak kullanılabilirsiniz. Tüm temel komutları busyboxtan türetmek için  **/busybox --install -s /bin** komutunu kullanabilirsiniz.

Buradaki komutları sırayla anlatırsak;
1. #!busybox ash 		: ash bir kabuk veya terminal programıdır.
2. PATH=/bin 			: komutlar çalışırken nerede arayacağı belirtiliyor
3. /busybox mkdir /bin		: **busybox mkdir**  yardımıyla **/bin** dizini oluşturuluyor.
4. /busybox --install -s /bin	: **/bin** dizinine tüm komutları kısa yol oluşturur.
5. /busybox ash			: ash terminalini çalıştırır. Bash yerine alternatif.

**kernel**, **initrd.img** dosyasını bellek üzerine açıp **init** dosyasını çalıştırınca sırasıyla numaralandırılarak anlattığımız işlemler yapılacak ve çalışabilecek ortam hazırlanacaktır. Daha sonra ash terminali çalışarak kullanıcının kullanımına hazır hale gelecektir.
	
init çalıştırılabilir yapılır.

.. code-block:: shell

	chmod +x init #komutu ile çalıştırılır yapılır.

**$HOME/distro/iso/boot/initrd.img**
------------------------------------

initrd.img dosyası için aşağıdaki komutlar çalıştırılır

.. code-block:: shell

	cd $HOME/distro/rootfs
	find ./ | cpio -H newc -o >$HOME/distro/iso/boot/initrd.img	

Oluşturulan **initrd.img** dosyası çalışacak tty açacak(konsol elde etmiş olacağız). 
Aslında bu işlemi yapan şey **busybox** ikili dosyası.

**$HOME/distro/iso/boot/vmlinuz**
---------------------------------

.. code-block:: shell

	cp /boot/vmlinuz* $HOME/distro/iso/boot/vmlinuz  #sistemde kullandığım kerneli kopyaladım istenirde kernel derlenebilir.


**$HOME/distro/iso/boot/grub/grub.cfg**
---------------------------------------

**$HOME/distro/iso/boot/grub/** konumuna **grub.cfg** dosyası oluşturun.
Aşağıdaki komutları **grub.cfg**  dosyası içine eklenir.

.. code-block:: shell

	linux /boot/vmlinuz
	initrd /boot/initrd.img
	boot

**$HOME/distro/distro.iso**
---------------------------

iso oluşturulur.

.. code-block:: shell

	grub-mkrescue $HOME/distro/iso/ -o $HOME/distro/distro.iso # komutuyla iso doyamız oluşturulur.

Artık sistemi açabilen ve tty açıp bize suna bir yapı oluşturduk.


**Dağıtımın Test Edilmesi**
---------------------------
 
Hazırlanan   **$HOME/distro/distro.iso** dağıtımımız qemu veya virtualbox ile test edilebilir.

Aşağıdaki komutla çalıştırıp test edebiliriz.

.. code-block:: shell

	qemu-system-x86_64 -cdrom $HOME/distro/distro.iso -m 1G

Eğer hatasız yapılmışsa sistem açılacak ve tty açacaktır. Birçok komutu çalışan bir dağıtım oluşturmuş olduk.

